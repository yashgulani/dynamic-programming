/// longest common subsequence
#include<bits/stdc++.h>
using namespace std;
/// recursive
int lcs(string s1,string s2,int m,int n)
{
    if(m==0 || n==0)
        return 0;
    if(s1[m-1]==s2[n-1])
    {
        return 1 + lcs(s1,s2,m-1,n-1);
    }
    else return max(lcs(s1,s2,m-1,n),lcs(s1,s2,m,n-1));
}
/// dp
int lcs_dp(string s1,string s2,int m,int n)
{
    int dp[m+1][n+1];
    for(int i=0;i<=m;i++)
    {
        for(int j=0;j<=n;j++)
        {
            dp[i][j] = 0; /// base case bhi ho gya empty string k liye 0
        }
    }
    for(int i=1;i<=m;i++)
    {
        for(int j=1;j<=n;j++)
        {
            if(s1[i-1] == s2[j-1])
            {
                dp[i][j] = 1 + dp[i-1][j-1];
            }
            else{
                dp[i][j] = max(dp[i-1][j],dp[i][j-1]);/// ye dono terms pehle se known hogi i j k liye
            }
        }
    }
    return dp[m][n];
}
int main()
{
    string s1,s2;
    cin>>s1>>s2;
    int m = s1.length();
    int n = s2.length();
    cout<<lcs(s1,s2,m,n)<<" "<<lcs_dp(s1,s2,m,n);
}
